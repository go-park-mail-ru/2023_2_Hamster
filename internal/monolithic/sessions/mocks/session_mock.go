// Code generated by MockGen. DO NOT EDIT.
// Source: sessions.go

// Package mock_sessions is a generated GoMock package.
package mock_sessions

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Hamster/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreateSessionById mocks base method.
func (m *MockUsecase) CreateSessionById(ctx context.Context, userID uuid.UUID) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionById", ctx, userID)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSessionById indicates an expected call of CreateSessionById.
func (mr *MockUsecaseMockRecorder) CreateSessionById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionById", reflect.TypeOf((*MockUsecase)(nil).CreateSessionById), ctx, userID)
}

// DeleteSessionByCookie mocks base method.
func (m *MockUsecase) DeleteSessionByCookie(ctx context.Context, cookie string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByCookie", ctx, cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByCookie indicates an expected call of DeleteSessionByCookie.
func (mr *MockUsecaseMockRecorder) DeleteSessionByCookie(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByCookie", reflect.TypeOf((*MockUsecase)(nil).DeleteSessionByCookie), ctx, cookie)
}

// GetSessionByCookie mocks base method.
func (m *MockUsecase) GetSessionByCookie(ctx context.Context, cookie string) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByCookie", ctx, cookie)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByCookie indicates an expected call of GetSessionByCookie.
func (mr *MockUsecaseMockRecorder) GetSessionByCookie(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByCookie", reflect.TypeOf((*MockUsecase)(nil).GetSessionByCookie), ctx, cookie)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockRepository) CreateSession(ctx context.Context, session models.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockRepositoryMockRecorder) CreateSession(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockRepository)(nil).CreateSession), ctx, session)
}

// DeleteSession mocks base method.
func (m *MockRepository) DeleteSession(ctx context.Context, cookie string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockRepositoryMockRecorder) DeleteSession(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockRepository)(nil).DeleteSession), ctx, cookie)
}

// GetSessionByCookie mocks base method.
func (m *MockRepository) GetSessionByCookie(ctx context.Context, cookie string) (models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByCookie", ctx, cookie)
	ret0, _ := ret[0].(models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByCookie indicates an expected call of GetSessionByCookie.
func (mr *MockRepositoryMockRecorder) GetSessionByCookie(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByCookie", reflect.TypeOf((*MockRepository)(nil).GetSessionByCookie), ctx, cookie)
}
