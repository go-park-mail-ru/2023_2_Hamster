// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package auth

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth(in *jlexer.Lexer, out *UserIdInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth(out *jwriter.Writer, in UserIdInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserIdInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserIdInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserIdInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserIdInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth(l, v)
}
func easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth1(in *jlexer.Lexer, out *UniqCheckInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth1(out *jwriter.Writer, in UniqCheckInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UniqCheckInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UniqCheckInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UniqCheckInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UniqCheckInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth1(l, v)
}
func easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth2(in *jlexer.Lexer, out *SignUpInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "password":
			out.PlaintPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth2(out *jwriter.Writer, in SignUpInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.PlaintPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignUpInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignUpInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignUpInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignUpInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth2(l, v)
}
func easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth3(in *jlexer.Lexer, out *SignResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "login":
			out.Login = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth3(out *jwriter.Writer, in SignResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth3(l, v)
}
func easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth4(in *jlexer.Lexer, out *LoginInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.PlaintPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth4(out *jwriter.Writer, in LoginInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.PlaintPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LoginInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LoginInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LoginInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LoginInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth4(l, v)
}
func easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth5(in *jlexer.Lexer, out *ChangePasswordInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Login":
			out.Login = string(in.String())
		case "old_password":
			out.OldPassword = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth5(out *jwriter.Writer, in ChangePasswordInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"old_password\":"
		out.RawString(prefix)
		out.String(string(in.OldPassword))
	}
	{
		const prefix string = ",\"new_password\":"
		out.RawString(prefix)
		out.String(string(in.NewPassword))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangePasswordInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangePasswordInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7bd98005EncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangePasswordInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangePasswordInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7bd98005DecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAuth5(l, v)
}
