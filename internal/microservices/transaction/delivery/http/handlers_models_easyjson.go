// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2023_2_Hamster/internal/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp(in *jlexer.Lexer, out *UpdTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "transaction_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "account_income":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AccountIncomeID).UnmarshalText(data))
			}
		case "account_outcome":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AccountOutcomeID).UnmarshalText(data))
			}
		case "income":
			out.Income = float64(in.Float64())
		case "outcome":
			out.Outcome = float64(in.Float64())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "payer":
			out.Payer = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]models.CategoryName, 0, 2)
					} else {
						out.Categories = []models.CategoryName{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 models.CategoryName
					easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalModels(in, &v1)
					out.Categories = append(out.Categories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp(out *jwriter.Writer, in UpdTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"transaction_id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"account_income\":"
		out.RawString(prefix)
		out.RawText((in.AccountIncomeID).MarshalText())
	}
	{
		const prefix string = ",\"account_outcome\":"
		out.RawString(prefix)
		out.RawText((in.AccountOutcomeID).MarshalText())
	}
	{
		const prefix string = ",\"income\":"
		out.RawString(prefix)
		out.Float64(float64(in.Income))
	}
	{
		const prefix string = ",\"outcome\":"
		out.RawString(prefix)
		out.Float64(float64(in.Outcome))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix)
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Categories {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalModels(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp(l, v)
}
func easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalModels(in *jlexer.Lexer, out *models.CategoryName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "category_name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalModels(out *jwriter.Writer, in models.CategoryName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"category_name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp1(in *jlexer.Lexer, out *CreateTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account_income":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AccountIncomeID).UnmarshalText(data))
			}
		case "account_outcome":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.AccountOutcomeID).UnmarshalText(data))
			}
		case "income":
			out.Income = float64(in.Float64())
		case "outcome":
			out.Outcome = float64(in.Float64())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "payer":
			out.Payer = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "categories":
			if in.IsNull() {
				in.Skip()
				out.Categories = nil
			} else {
				in.Delim('[')
				if out.Categories == nil {
					if !in.IsDelim(']') {
						out.Categories = make([]models.CategoryName, 0, 2)
					} else {
						out.Categories = []models.CategoryName{}
					}
				} else {
					out.Categories = (out.Categories)[:0]
				}
				for !in.IsDelim(']') {
					var v4 models.CategoryName
					easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalModels(in, &v4)
					out.Categories = append(out.Categories, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp1(out *jwriter.Writer, in CreateTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account_income\":"
		out.RawString(prefix[1:])
		out.RawText((in.AccountIncomeID).MarshalText())
	}
	{
		const prefix string = ",\"account_outcome\":"
		out.RawString(prefix)
		out.RawText((in.AccountOutcomeID).MarshalText())
	}
	{
		const prefix string = ",\"income\":"
		out.RawString(prefix)
		out.Float64(float64(in.Income))
	}
	{
		const prefix string = ",\"outcome\":"
		out.RawString(prefix)
		out.Float64(float64(in.Outcome))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"payer\":"
		out.RawString(prefix)
		out.String(string(in.Payer))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"categories\":"
		out.RawString(prefix)
		if in.Categories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Categories {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalModels(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesTransactionDeliveryHttp1(l, v)
}
