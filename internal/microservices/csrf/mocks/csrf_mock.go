// Code generated by MockGen. DO NOT EDIT.
// Source: csrf.go

// Package mock_csrf is a generated GoMock package.
package mock_csrf

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CheckCSRFToken mocks base method.
func (m *MockUsecase) CheckCSRFToken(acessToken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCSRFToken", acessToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCSRFToken indicates an expected call of CheckCSRFToken.
func (mr *MockUsecaseMockRecorder) CheckCSRFToken(acessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCSRFToken", reflect.TypeOf((*MockUsecase)(nil).CheckCSRFToken), acessToken)
}

// GenerateCSRFToken mocks base method.
func (m *MockUsecase) GenerateCSRFToken(userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCSRFToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCSRFToken indicates an expected call of GenerateCSRFToken.
func (mr *MockUsecaseMockRecorder) GenerateCSRFToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCSRFToken", reflect.TypeOf((*MockUsecase)(nil).GenerateCSRFToken), userID)
}
