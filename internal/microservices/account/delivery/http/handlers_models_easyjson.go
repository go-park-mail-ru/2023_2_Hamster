// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp(in *jlexer.Lexer, out *UpdateAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "balance":
			out.Balance = float64(in.Float64())
		case "accumulation":
			out.Accumulation = bool(in.Bool())
		case "balance_enabled":
			out.BalanceEnabled = bool(in.Bool())
		case "mean_payment":
			out.MeanPayment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp(out *jwriter.Writer, in UpdateAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix)
		out.Float64(float64(in.Balance))
	}
	{
		const prefix string = ",\"accumulation\":"
		out.RawString(prefix)
		out.Bool(bool(in.Accumulation))
	}
	{
		const prefix string = ",\"balance_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.BalanceEnabled))
	}
	{
		const prefix string = ",\"mean_payment\":"
		out.RawString(prefix)
		out.String(string(in.MeanPayment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp(l, v)
}
func easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp1(in *jlexer.Lexer, out *CreateAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			out.Balance = float64(in.Float64())
		case "accumulation":
			out.Accumulation = bool(in.Bool())
		case "balance_enabled":
			out.BalanceEnabled = bool(in.Bool())
		case "mean_payment":
			out.MeanPayment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp1(out *jwriter.Writer, in CreateAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Balance))
	}
	{
		const prefix string = ",\"accumulation\":"
		out.RawString(prefix)
		out.Bool(bool(in.Accumulation))
	}
	{
		const prefix string = ",\"balance_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.BalanceEnabled))
	}
	{
		const prefix string = ",\"mean_payment\":"
		out.RawString(prefix)
		out.String(string(in.MeanPayment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF13216eaEncodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF13216eaDecodeGithubComGoParkMailRu20232HamsterInternalMicroservicesAccountDeliveryHttp1(l, v)
}
