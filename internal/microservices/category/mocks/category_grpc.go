// Code generated by MockGen. DO NOT EDIT.
// Source: delivery/grpc/generated/category_grpc.pb.go

// Package mock_generated is a generated GoMock package.
package mock_category

import (
	context "context"
	reflect "reflect"

	generated "github.com/go-park-mail-ru/2023_2_Hamster/internal/microservices/category/delivery/grpc/generated"
	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// MockCategoryServiceClient is a mock of CategoryServiceClient interface.
type MockCategoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceClientMockRecorder
}

// MockCategoryServiceClientMockRecorder is the mock recorder for MockCategoryServiceClient.
type MockCategoryServiceClientMockRecorder struct {
	mock *MockCategoryServiceClient
}

// NewMockCategoryServiceClient creates a new mock instance.
func NewMockCategoryServiceClient(ctrl *gomock.Controller) *MockCategoryServiceClient {
	mock := &MockCategoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryServiceClient) EXPECT() *MockCategoryServiceClientMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockCategoryServiceClient) CreateTag(ctx context.Context, in *generated.CreateTagRequest, opts ...grpc.CallOption) (*generated.CreateTagResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTag", varargs...)
	ret0, _ := ret[0].(*generated.CreateTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockCategoryServiceClientMockRecorder) CreateTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockCategoryServiceClient)(nil).CreateTag), varargs...)
}

// DeleteTag mocks base method.
func (m *MockCategoryServiceClient) DeleteTag(ctx context.Context, in *generated.DeleteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTag", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockCategoryServiceClientMockRecorder) DeleteTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockCategoryServiceClient)(nil).DeleteTag), varargs...)
}

// GetTags mocks base method.
func (m *MockCategoryServiceClient) GetTags(ctx context.Context, in *generated.UserIdRequest, opts ...grpc.CallOption) (*generated.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*generated.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockCategoryServiceClientMockRecorder) GetTags(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockCategoryServiceClient)(nil).GetTags), varargs...)
}

// UpdateTag mocks base method.
func (m *MockCategoryServiceClient) UpdateTag(ctx context.Context, in *generated.Category, opts ...grpc.CallOption) (*generated.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTag", varargs...)
	ret0, _ := ret[0].(*generated.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockCategoryServiceClientMockRecorder) UpdateTag(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockCategoryServiceClient)(nil).UpdateTag), varargs...)
}

// MockCategoryServiceServer is a mock of CategoryServiceServer interface.
type MockCategoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceServerMockRecorder
}

// MockCategoryServiceServerMockRecorder is the mock recorder for MockCategoryServiceServer.
type MockCategoryServiceServerMockRecorder struct {
	mock *MockCategoryServiceServer
}

// NewMockCategoryServiceServer creates a new mock instance.
func NewMockCategoryServiceServer(ctrl *gomock.Controller) *MockCategoryServiceServer {
	mock := &MockCategoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryServiceServer) EXPECT() *MockCategoryServiceServerMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockCategoryServiceServer) CreateTag(arg0 context.Context, arg1 *generated.CreateTagRequest) (*generated.CreateTagResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", arg0, arg1)
	ret0, _ := ret[0].(*generated.CreateTagResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockCategoryServiceServerMockRecorder) CreateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockCategoryServiceServer)(nil).CreateTag), arg0, arg1)
}

// DeleteTag mocks base method.
func (m *MockCategoryServiceServer) DeleteTag(arg0 context.Context, arg1 *generated.DeleteRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockCategoryServiceServerMockRecorder) DeleteTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockCategoryServiceServer)(nil).DeleteTag), arg0, arg1)
}

// GetTags mocks base method.
func (m *MockCategoryServiceServer) GetTags(arg0 context.Context, arg1 *generated.UserIdRequest) (*generated.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0, arg1)
	ret0, _ := ret[0].(*generated.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockCategoryServiceServerMockRecorder) GetTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockCategoryServiceServer)(nil).GetTags), arg0, arg1)
}

// UpdateTag mocks base method.
func (m *MockCategoryServiceServer) UpdateTag(arg0 context.Context, arg1 *generated.Category) (*generated.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", arg0, arg1)
	ret0, _ := ret[0].(*generated.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockCategoryServiceServerMockRecorder) UpdateTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockCategoryServiceServer)(nil).UpdateTag), arg0, arg1)
}

// mustEmbedUnimplementedCategoryServiceServer mocks base method.
func (m *MockCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCategoryServiceServer")
}

// mustEmbedUnimplementedCategoryServiceServer indicates an expected call of mustEmbedUnimplementedCategoryServiceServer.
func (mr *MockCategoryServiceServerMockRecorder) mustEmbedUnimplementedCategoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCategoryServiceServer", reflect.TypeOf((*MockCategoryServiceServer)(nil).mustEmbedUnimplementedCategoryServiceServer))
}

// MockUnsafeCategoryServiceServer is a mock of UnsafeCategoryServiceServer interface.
type MockUnsafeCategoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCategoryServiceServerMockRecorder
}

// MockUnsafeCategoryServiceServerMockRecorder is the mock recorder for MockUnsafeCategoryServiceServer.
type MockUnsafeCategoryServiceServerMockRecorder struct {
	mock *MockUnsafeCategoryServiceServer
}

// NewMockUnsafeCategoryServiceServer creates a new mock instance.
func NewMockUnsafeCategoryServiceServer(ctrl *gomock.Controller) *MockUnsafeCategoryServiceServer {
	mock := &MockUnsafeCategoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCategoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCategoryServiceServer) EXPECT() *MockUnsafeCategoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCategoryServiceServer mocks base method.
func (m *MockUnsafeCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCategoryServiceServer")
}

// mustEmbedUnimplementedCategoryServiceServer indicates an expected call of mustEmbedUnimplementedCategoryServiceServer.
func (mr *MockUnsafeCategoryServiceServerMockRecorder) mustEmbedUnimplementedCategoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCategoryServiceServer", reflect.TypeOf((*MockUnsafeCategoryServiceServer)(nil).mustEmbedUnimplementedCategoryServiceServer))
}
