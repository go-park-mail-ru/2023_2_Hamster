// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a91a67cDecodeGithubComGoParkMailRu20232HamsterInternalModels(in *jlexer.Lexer, out *Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "user_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.UserID).UnmarshalText(data))
			}
		case "parent_id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ParentID).UnmarshalText(data))
			}
		case "image_id":
			out.Image = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "show_income":
			out.ShowIncome = bool(in.Bool())
		case "show_outcome":
			out.ShowOutcome = bool(in.Bool())
		case "regular":
			out.Regular = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a91a67cEncodeGithubComGoParkMailRu20232HamsterInternalModels(out *jwriter.Writer, in Category) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.RawText((in.UserID).MarshalText())
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.RawText((in.ParentID).MarshalText())
	}
	{
		const prefix string = ",\"image_id\":"
		out.RawString(prefix)
		out.Int(int(in.Image))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"show_income\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowIncome))
	}
	{
		const prefix string = ",\"show_outcome\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowOutcome))
	}
	{
		const prefix string = ",\"regular\":"
		out.RawString(prefix)
		out.Bool(bool(in.Regular))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Category) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a91a67cEncodeGithubComGoParkMailRu20232HamsterInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a91a67cEncodeGithubComGoParkMailRu20232HamsterInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Category) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a91a67cDecodeGithubComGoParkMailRu20232HamsterInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a91a67cDecodeGithubComGoParkMailRu20232HamsterInternalModels(l, v)
}
