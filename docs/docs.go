// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Hamster API Support",
            "url": "https://t.me/CodeMaster482",
            "email": "grigorikovalenko@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/account/create": {
            "post": {
                "description": "Create account",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Create account",
                "parameters": [
                    {
                        "description": "Input account create",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create account",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/account/update": {
            "put": {
                "description": "Put \taccount",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "PUT \tUpdate",
                "parameters": [
                    {
                        "description": "Input transactin update",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdateAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update account",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/account/{account_id}/delete": {
            "delete": {
                "description": "Delete account with chosen ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Delete Account",
                "responses": {
                    "200": {
                        "description": "Account deleted",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Account error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "User unathorized",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "User hasn't rights",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/auth/checkAuth": {
            "post": {
                "description": "Validate auth",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Validate Auth",
                "parameters": [
                    {
                        "description": "user info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User status",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid cookie",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error: cookie read fail",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/auth/checkLogin/": {
            "post": {
                "description": "Get bool parametrs about unique login",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Get unique login info",
                "responses": {
                    "200": {
                        "description": "Show user",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/auth/password/": {
            "put": {
                "description": "Takes old password and newpassword and chnge password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Change Password",
                "parameters": [
                    {
                        "description": "username \u0026\u0026 password",
                        "name": "userInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ChangePasswordInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user Info",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/auth/signin": {
            "post": {
                "description": "Login account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign In",
                "parameters": [
                    {
                        "description": "username \u0026\u0026 password",
                        "name": "userInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginInput"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "User logedin",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Incorrect Input",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Incorrect password",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "404": {
                        "description": "User doesn't exist",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/auth/signup": {
            "post": {
                "description": "Create Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign Up",
                "parameters": [
                    {
                        "description": "user info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Incorrect Input",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "409": {
                        "description": "User already exists",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/csrf/": {
            "get": {
                "description": "Get csrf token",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Csrf"
                ],
                "summary": "Get csrf token",
                "responses": {
                    "200": {
                        "description": "Csrf Token",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/goals": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing goal for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Update Goal",
                "parameters": [
                    {
                        "description": "Updated goal information",
                        "name": "goalInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Goal"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated goal",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found: Goal not found",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to update goal",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/goals/checkState": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check the state of goals for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Check Goals State",
                "responses": {
                    "200": {
                        "description": "Successfully checked goals state",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Failed to check goals state",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/tag/all": {
            "get": {
                "description": "Get all tags for user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get Tags",
                "responses": {
                    "200": {
                        "description": "tag slice",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Incorrect Input",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "auth error relogin",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/tag/create": {
            "post": {
                "description": "Creates tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Create Tag",
                "parameters": [
                    {
                        "description": "tag info",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/category.TagInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tag with id creted",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Incorrect Input",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "auth error relogin",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/tag/delete": {
            "delete": {
                "description": "delete tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Delete Tag",
                "parameters": [
                    {
                        "description": "tag id",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tag slice",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Incorrect Input",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "auth error relogin",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/tag/{tagId}/update": {
            "put": {
                "description": "Update Tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Update Tag",
                "parameters": [
                    {
                        "description": "tag info",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "tag to update",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Incorrect Input",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "auth error relogin",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "429": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/count": {
            "get": {
                "description": "Get User count transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get count transaction",
                "responses": {
                    "200": {
                        "description": "Show transaction count",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/create": {
            "post": {
                "description": "Create transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create transaction",
                "parameters": [
                    {
                        "description": "Input transactin create",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.CreateTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Create transaction",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/export": {
            "get": {
                "description": "Sends a .csv file with transactions based on the specified criteria.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Export .csv Transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date (format: 'YYYY-MM-DD')",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date (format: 'YYYY-MM-DD')",
                        "name": "endDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "session_id",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully exported transactions\"   {example: \"TransactionID,Amount,Date\\n1,100,2023-01-01\\n2,150,2023-01-02\\n\"}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - Transaction error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User doesn't have rights",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found - No transactions found for the specified criteria",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/feed": {
            "get": {
                "description": "Get User all transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get all transaction",
                "parameters": [
                    {
                        "type": "string",
                        "example": "uuid",
                        "name": "account",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "uuid",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2023-12-21T19:30:57+03:00",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "name": "income",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "name": "outcome",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "2023-11-21T19:30:57+03:00",
                        "name": "start_date",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Show transaction",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "204": {
                        "description": "Show actual accounts",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/import": {
            "post": {
                "description": "` + "`" + `Uploads a CSV file containing transactions and processes them to be stored in the system.",
                "consumes": [
                    "mult` + "`" + `ipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Export Transactions from CSV",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file containing transactions data",
                        "name": "csv",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully imported transactions",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request - Transaction error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - User unauthorized",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden - User doesn't have rights",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found - No transactions found for the specified criteria",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "413": {
                        "description": "Request Entity Too Large - File is too large",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/update": {
            "put": {
                "description": "Put transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "PUT Update",
                "parameters": [
                    {
                        "description": "Input transactin update",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/http.UpdTransaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update transaction",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/transaction/{transaction_id}/delete": {
            "delete": {
                "description": "Delete transaction with chosen ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Delete Transaction",
                "responses": {
                    "200": {
                        "description": "Transaction deleted",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Transaction error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "User unathorized",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "User hasn't rights",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/": {
            "get": {
                "description": "Get user with chosen ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User",
                "responses": {
                    "200": {
                        "description": "Show user",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/accounts/all": {
            "get": {
                "description": "Get User accounts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Accounts",
                "responses": {
                    "200": {
                        "description": "Show actual accounts",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "204": {
                        "description": "Show actual accounts",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/actualBudget": {
            "get": {
                "description": "Get User actual budget",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Actual Budget",
                "responses": {
                    "200": {
                        "description": "Show actual budget",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/addUserInAccount": {
            "post": {
                "description": "Post \tUser",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "POST \tAdd User in Account",
                "parameters": [
                    {
                        "description": "Add user in account",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.AddUserAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update account",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "404": {
                        "description": "No user found with this login",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/balance": {
            "get": {
                "description": "Get User balance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Balance",
                "responses": {
                    "200": {
                        "description": "Show balance",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/deleteUserInAccount": {
            "delete": {
                "description": "Post \tUser",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "DELETE \tDelete user in Account",
                "parameters": [
                    {
                        "description": "Delete user in Account",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DeleteInAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Unsibscribe in Account",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/feed": {
            "get": {
                "description": "Get Feed user info",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Feed",
                "responses": {
                    "200": {
                        "description": "Show actual accounts",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/goal/": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve goals for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Get User Goals",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user goals",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to get user goals",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/goal/add": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new goal for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Create Goal",
                "parameters": [
                    {
                        "description": "Goal creation input",
                        "name": "goalInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/goal.GoalCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created goal",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to create goal",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/goal/{goalID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an existing goal for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Goals"
                ],
                "summary": "Delete Goal",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the goal to delete",
                        "name": "goalID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted goal",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found: Goal not found",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to delete goal",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/plannedBudget": {
            "get": {
                "description": "Get User planned budget",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Planned Budget",
                "responses": {
                    "200": {
                        "description": "Show planned budget",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/unsubscribeAccount/{account_id}": {
            "put": {
                "description": "Post \tUser",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "PUT \tUnsibscribe in Account",
                "responses": {
                    "200": {
                        "description": "Unsibscribe in Account",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/update": {
            "put": {
                "description": "Update user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "PUT Update",
                "parameters": [
                    {
                        "description": "user info update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/transfer_models.UserUdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update user info",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        },
        "/api/user/updatePhoto": {
            "put": {
                "description": "Update user photo",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "PUT Update Photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "New photo to upload",
                        "name": "upload",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Path to old photo",
                        "name": "path",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo updated successfully",
                        "schema": {
                            "$ref": "#/definitions/http.Response"
                        }
                    },
                    "400": {
                        "description": "Client error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "403": {
                        "description": "Forbidden user",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/http.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.ChangePasswordInput": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "new_password": {
                    "type": "string"
                },
                "old_password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginInput": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "category.TagInput": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Image       int       ` + "`" + `json:\"image_id\"` + "`" + `",
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "regular": {
                    "type": "boolean"
                },
                "show_income": {
                    "type": "boolean"
                },
                "show_outcome": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "goal.GoalCreateRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "http.CreateAccount": {
            "type": "object",
            "properties": {
                "accumulation": {
                    "type": "boolean"
                },
                "balance": {
                    "type": "number"
                },
                "balance_enabled": {
                    "type": "boolean"
                },
                "mean_payment": {
                    "type": "string"
                }
            }
        },
        "http.CreateTransaction": {
            "type": "object",
            "properties": {
                "account_income": {
                    "description": "???",
                    "type": "string"
                },
                "account_outcome": {
                    "description": "???",
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CategoryName"
                    }
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "income": {
                    "type": "number"
                },
                "outcome": {
                    "type": "number"
                },
                "payer": {
                    "type": "string"
                }
            }
        },
        "http.Response": {
            "type": "object",
            "properties": {
                "body": {},
                "status": {
                    "type": "integer"
                }
            }
        },
        "http.ResponseError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "http.UpdTransaction": {
            "type": "object",
            "properties": {
                "account_income": {
                    "type": "string"
                },
                "account_outcome": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.CategoryName"
                    }
                },
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "income": {
                    "type": "number"
                },
                "outcome": {
                    "type": "number"
                },
                "payer": {
                    "type": "string"
                },
                "transaction_id": {
                    "type": "string"
                }
            }
        },
        "http.UpdateAccount": {
            "type": "object",
            "properties": {
                "accumulation": {
                    "type": "boolean"
                },
                "balance": {
                    "type": "number"
                },
                "balance_enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "mean_payment": {
                    "type": "string"
                }
            }
        },
        "models.AddUserAccount": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "description": "Image       int       ` + "`" + `json:\"image_id\" valid:\"-\"` + "`" + `",
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "regular": {
                    "type": "boolean"
                },
                "show_income": {
                    "type": "boolean"
                },
                "show_outcome": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.CategoryName": {
            "type": "object",
            "properties": {
                "category_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "models.DeleteInAccount": {
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Goal": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "total": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "planned_budget": {
                    "type": "number"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "transfer_models.UserUdate": {
            "type": "object",
            "properties": {
                "planned_budget": {
                    "type": "number"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.1",
	Host:             "localhost:8080",
	BasePath:         "/user/{userID}/account/feed",
	Schemes:          []string{},
	Title:            "Hamster API",
	Description:      "Server API for Hamster Money Service Application",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
