version: '3.8'

networks:
  hammy-network:
    driver: bridge

services:
  db:
    container_name: hammy-db
    image: postgres:latest
    restart: always
    env_file:
      - .local.env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PORT: ${DB_PORT}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./build/schema/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hamster -d HammyWallets"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - hammy-network
  
  redis:
    container_name: hammy-redis
    image: redis:latest
    restart: on-failure
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - hammy-network

  # hammywallet-api:
  #   #container_name: ${CONTAINER_NAME}
  #   #image:  ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA_SHORT}
  #   build: 
  #     context: .
  #     dockerfile: build/Dockerfile
  #   env_file:
  #     - .local.env
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   volumes:
  #     - ./.env:/docker-hammywallet/.env
  #     - ./api-logs:/docker-hammywallet/logs
  #     - type: bind
  #       source: /images
  #       target: /images
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     category:
  #       condition: service_started
  #     account:
  #       condition: service_started
  #     auth:
  #       condition: service_started
  #   networks:
  #     - hammy-network
  
  # auth:
  #   container_name: auth
  #   #image:  ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA_SHORT}
  #   build: 
  #     context: .
  #     dockerfile: build/auth.Dockerfile
  #   env_file:
  #     - .local.env
  #   restart: always
  #   ports:
  #     - "8010:8010"
  #     - "8011:8011"
  #   volumes:
  #     - ./.env:/docker-hammywallet/.env
  #     - ./api-logs:/docker-hammywallet/logs
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - hammy-network
  
  # account:
  #   container_name: account
  #   #image:  ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA_SHORT}
  #   build: 
  #     context: .
  #     dockerfile: build/account.Dockerfile
  #   env_file:
  #     - .local.env
  #   restart: always
  #   ports:
  #     - "8020:8020"
  #     - "8021:8021"
  #   volumes:
  #     - ./.env:/docker-hammywallet/.env
  #     - ./api-logs:/docker-hammywallet/logs
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - hammy-network
  # category:
  #   container_name: category
  #   #image:  ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA_SHORT}
  #   build: 
  #     context: .
  #     dockerfile: build/category.Dockerfile
  #   env_file:
  #     - .local.env
  #   restart: always
  #   ports:
  #     - "8030:8030"
  #     - "8031:8031"
  #   volumes:
  #     - ./.env:/docker-hammywallet/.env
  #     - ./api-logs:/docker-hammywallet/logs
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - hammy-network
#
#  question:
#    container_name: question
#    dockerfile: Dockerfile
#    ports:
#    - "8088:8088"
#    volumes:
#    - ./.env:/docker-hammywallet/.env
#    - ./api-logs:/docker-hammywallet/logs
#    depends_on:
#      - hammy-question
#    env_file:
#      - .env
#    restart: always

#  prometheus:
#    container_name: prometheus
#    image: prom/prometheus:latest
#    volumes:
#      - ./metrics/prometheus:/etc/prometheus
#    ports:
#      - "9090:9090"
#
#  nodeexporter:
#    container_name: node_exporter
#    image: prom/node-exporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    restart: unless-stopped
#    ports:
#      - "9100:9100"
#
#
#  grafana:
#    container_name: grafana
#    image: grafana/grafana-oss:9.4.3
#    user: '0'
#    ports:
#      - "3000:3000"
#    volumes:
#      - type: bind
#        source: /home/ubuntu/grafana_metrics
#        target: /var/lib/grafana



