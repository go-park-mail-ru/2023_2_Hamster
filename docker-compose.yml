version: '3.8'

networks:
  hamster-net:
    driver: bridge

services:
  hammy-postgres:
    container_name: hammy-postgres
    image: postgres:latest
    restart: on-failure
    env_file:
      - .env
    command:
      - "postgres"
      - "-c"
      - "max_connections=5"
      - "-c"
      - "shared_buffers=100MB"
      - "-c"
      - "effective_cache_size=0.5GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=1GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./build/schema/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - hamster-net

  hammy-question:
    container_name: hammy-question
    image: postgres:latest
    restart: on-failure
    env_file:
      - .env
    command:
      - "postgres"
      - "-c"
      - "max_connections=5"
      - "-c"
      - "shared_buffers=100MB"
      - "-c"
      - "effective_cache_size=0.5GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=1GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    ports:
      - "${DB_PROD_QUESTION}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME_QUESTION}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./build/question/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - hamster-net

  hammy-redis:
    container_name: hammy-redis
    image: redis:latest
    restart: on-failure
    networks:
      - hamster-net
    ports:
      - "${REDIS_PORT}:6379"


  hammywallet-api:
    container_name: ${CONTAINER_NAME}
    image:  ${REGISTRY}/${IMAGE_NAME}:${GITHUB_SHA_SHORT}
    env_file:
      - .env
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - ./.env:/docker-hammywallet/.env
      - ./api-logs:/docker-hammywallet/logs
      - type: bind
        source: /home/ubuntu/frontend/images
        target: /images
    depends_on:
      - hammy-postgres
      - hammy-redis
    networks:
      - hamster-net

  question:
    container_name: question
    dockerfile: Dockerfile
    ports:
    - "8088:8088"
    volumes:
    - ./.env:/docker-hammywallet/.env
    - ./api-logs:/docker-hammywallet/logs
    depends_on:
      - hammy-question
    env_file:
      - .env
    restart: always


  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./metrics/prometheus/:/etc/prometheus/
    ports:
      - "8090:9090"
    networks:
      - hamster-net

  nodeexporter:
    container_name: node_exporter
    image: prom/node-exporter
    user: "0"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: unless-stopped
    ports:
      - "8100:9100"
    networks:
      - hamster-net

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:9.4.3
    user: '0'
    environment:
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_SERVER_ROOT_URL: "https://hammywallet.ru/grafana/"
    ports:
      - "8015:3000"
    volumes:
      - type: bind
        source: /home/ubuntu/grafana_metrics
        target: /var/lib/grafana
    networks:
    - hamster-net
volumes:
  api-logs: