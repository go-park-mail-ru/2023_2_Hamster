version: '3.8'

networks:
  app-network:
    driver: bridge

services:

  server:
    build:
      context: .
      dockerfile: ./build/Dockerfile
    restart: on-failure
    networks:
      - app-network
    ports:
      - "8080:8080"
    depends_on:
      - db
      - redis
    env_file:
      - .env

  postgres:
    image: postgres:latest
    restart: on-failure
    env_file:
      - .env
    command: 
      - "postgres"
      - "-c"
      - "max_connections=5"
      - "-c"
      - "shared_buffers=100MB"
      - "-c"
      - "effective_cache_size=0.5GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=64MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=1GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./cmd/api/init/db/postgresql/schema/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network

  redis:
    image: redis:latest
    restart: on-failure
    networks:
      - app-network
    ports:
      - "6379:6379"
